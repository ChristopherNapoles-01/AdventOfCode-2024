package main

// full context of the code check  this link https://adventofcode.com/2024/day/2 --part 1

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

var lines []string
var originalLines [][]int
var isIncreasing bool = true
var total int = 0
var reAssessCount int = 0
var isReassess bool = true
var globalLineIndex int

func main() {
	file := scanFile()
	rawContents := bufio.NewScanner(file)
	convertFileValuesToString(rawContents)
	processData()
}

func processData() {
	convertEachToInteger()
	totalSafe := checkIfSafeOrUnSafe(originalLines)

	log.Println(totalSafe)
}

func scanFile() *os.File {
	file, err := os.Open("input.txt")

	if err != nil {
		fmt.Println("Error reading file")
	}

	return file
}

func convertFileValuesToString(contents *bufio.Scanner) {
	for contents.Scan() {
		lines = append(lines, contents.Text())
	}
}

func convertEachToInteger() {
	linesInInt := [][]int{}

	for index, line := range lines {
		fields := strings.Fields(line)

		linesInInt = append(linesInInt, []int{})

		for _, field := range fields {
			digit, err := strconv.Atoi(field)

			if err != nil {
				log.Fatal("Error Parsing String to Int")
			}
			linesInInt[index] = append(linesInInt[index], digit)
		}
	}

	originalLines = linesInInt
}

func checkIfSafeOrUnSafe(data [][]int) int {
	totalSafeCount := total

	for lineIndex, line := range data {
		globalLineIndex = lineIndex
		totalSafeCount += assess(line)
	}

	total = totalSafeCount

	return totalSafeCount
}

func assess(line []int) int {
	totalSafeCount := 0
	isSafe := true
	for index, digit := range line {
		if index == len(line)-1 {
			continue
		}

		diffRight := digit - line[index+1]

		if index == 0 {
			if diffRight > 0 {
				isIncreasing = false
			} else {
				isIncreasing = true
			}
		}

		diffRight = absolute(diffRight)

		if isIncreasing {
			if digit > line[index+1] {
				isSafe = false
			}
		}

		if !isIncreasing {
			if digit < line[index+1] {
				isSafe = false
			}
		}

		if diffRight == 0 {
			isSafe = false
		}

		if (diffRight) > 3 {
			isSafe = false
		}

		if !isSafe {
			// if reAssessCount == len(line)-1 {
			// 	reAssessCount = 0
			// 	break
			// }
			isSafe = reAssess(index)

			// if isSafe {
			// 	break
			// }

			if reAssessCount == 0 {
				break
			}

		}
	}

	if isSafe {
		totalSafeCount += 1
		reAssessCount = 0
	}
	// reAssessCount = 0
	// if isSafe && isReassess {

	// }

	return totalSafeCount
}

func reAssess(index int) bool {
	if reAssessCount == 0 {
		reAssessCount = index
	}

	// // log.Println(endCount)
	lineToReassess := append([]int{}, originalLines[globalLineIndex]...)
	// log.Print(reAssessCount)
	// if endCount >= len(lineToReassess)-1 {
	// 	isReassess = false
	// 	return false
	// }

	// log.Println(lineToReassess)
	if reAssessCount > len(lineToReassess)-1 {
		// log.Fatal(reAssessCount)
		reAssessCount = 0
		return false
	}
	lineToProcess := append(lineToReassess[:reAssessCount], lineToReassess[reAssessCount+1:]...)

	log.Println(lineToProcess)
	// log.Println(lineToProcess)\
	reAssessCount++
	return assess(lineToProcess) > 0

	// return false

}

func absolute(num int) int {
	if num < 0 {
		num = num * -1
	}
	return num
}
