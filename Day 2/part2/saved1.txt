package main

// full context of the code check  this link https://adventofcode.com/2024/day/2 --part 1

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
)

var lines []string
var isIncreasing bool = true
var faultyIndexAndValue map[int][]map[int]int
var forReprocessing map[int][]int
var total int = 0

func main() {
	file := scanFile()
	rawContents := bufio.NewScanner(file)
	convertFileValuesToString(rawContents)
	processData()
	reprocess()
}

func processData() {
	log.Println(checkIfSafeOrUnSafe(convertEachToInteger()))
}

func scanFile() *os.File {
	file, err := os.Open("input.txt")

	if err != nil {
		fmt.Println("Error reading file")
	}

	return file
}

func convertFileValuesToString(contents *bufio.Scanner) {
	for contents.Scan() {
		lines = append(lines, contents.Text())
	}
}

func convertEachToInteger() [][]int {
	linesInInt := [][]int{}

	for index, line := range lines {
		fields := strings.Fields(line)

		linesInInt = append(linesInInt, []int{})

		for _, field := range fields {
			digit, err := strconv.Atoi(field)

			if err != nil {
				log.Fatal("Error Parsing String to Int")
			}
			linesInInt[index] = append(linesInInt[index], digit)
		}
	}

	return linesInInt
}

func checkIfSafeOrUnSafe(data [][]int) int {
	totalSafeCount := total

	for lineIndex, line := range data {
		totalSafeCount += assess(lineIndex, line, false)
		// log.Println(isSafe)
	}
	// log.Fatal(totalSafeCount)
	total = totalSafeCount
	return totalSafeCount
}

func assess(lineIndex int, line []int, isReprocess bool) int {
	isSafe := true
	totalSafeCount := 0

	for index, digit := range line {
		if index == len(line)-1 {
			continue
		}

		diffRight := digit - line[index+1]

		if index == 0 {
			if diffRight > 0 {
				isIncreasing = false
			} else {
				isIncreasing = true
			}
		}

		diffRight = absolute(diffRight)

		if isIncreasing {
			if digit > line[index+1] {
				isSafe = false
			}
		}

		if !isIncreasing {
			if digit < line[index+1] {
				isSafe = false
			}
		}

		if diffRight == 0 {
			isSafe = false
		}

		if (diffRight) > 3 {
			isSafe = false
		}

		if !isSafe && !isReprocess {
			if len(faultyIndexAndValue) == 0 {
				faultyIndexAndValue = map[int][]map[int]int{}
			}

			faultyIndexAndValue[lineIndex] = append(faultyIndexAndValue[lineIndex], map[int]int{(index + 1): line[index+1]})
		}
	}

	if isSafe {
		totalSafeCount += 1
	}

	if !isSafe && !isReprocess {
		// log.Fatal(line)
		if len(forReprocessing) == 0 {
			forReprocessing = map[int][]int{}
		}

		forReprocessing[lineIndex] = append(forReprocessing[lineIndex], line...)
	}

	return totalSafeCount
}

func reprocess() {
	// log.Fatal(faultyIndexAndValue)
	// log.Fatal(forReprocessing)

	for key, _ := range faultyIndexAndValue {

		// log.Fatal(forReprocessing[key])
		// log.Println(key)
		// log.Fatal(faultyIndexAndValue[key][0])
		for _, value := range faultyIndexAndValue[key] {
			tempVal := forReprocessing[key]
			// log.Println(tempVal)
			for toRemIndex, val := range value {
				if toRemIndex == len(tempVal)-1 {
					continue
				}
				// log.Println("Hello")
				tempVal[toRemIndex] = -1
				// tempVal = tempVal[:len(tempVal)-1]
				// log.Println(toRepVal)
				tempVal = append(tempVal[:toRemIndex], tempVal[toRemIndex+1:]...)
				if assess(key, tempVal, true) > 0 {
					log.Println(tempVal)
					total++
					// break
				}
				tempVal[toRemIndex] = val
				log.Println(tempVal)
			}
			// log.Println(tempVal)
		}
		// log.Fatal(forReprocessing[key])
		// for _, reprocessLine := range forReprocessing[key] {
		// 	log.Println(reprocessLine)
		// }
	}

	log.Println(total)
}

func absolute(num int) int {
	if num < 0 {
		num = num * -1
	}
	return num
}
